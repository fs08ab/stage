<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 开启事务控制的注解支持 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 配置spring的PlatformTransactionManager，名字为默认值 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--mybatis与Spring整合 -->
	<!--SqlSessionFactoryBean与DataSourceTransactionManager引用的数据源一致， MyBatis即可自动参与到spring事务管理中-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mapper_config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssit.stage.biz.dao" />
		<property name="sqlSessionTemplateBeanName" value="simpleSqlSessionTemplate" />
	</bean>

	<bean id="simpleSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="SIMPLE" />
	</bean>

	<!-- for dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc-1.url}" />
		<property name="username" value="${jdbc-1.username}" />
		<property name="password" value="${jdbc-1.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc-1.initialSize}" />
		<property name="minIdle" value="${jdbc-1.minIdle}" />
		<property name="maxActive" value="${jdbc-1.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc-1.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc-1.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc-1.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${jdbc-1.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc-1.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc-1.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc-1.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${jdbc-1.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc-1.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${jdbc-1.filters}" />
	</bean>
</beans>